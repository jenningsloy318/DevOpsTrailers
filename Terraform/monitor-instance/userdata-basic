#cloud-config
yum_repos:
    # The name of the repository
    chef-stable:
        name: chef-stable
        baseurl: https://packages.chef.io/repos/yum/stable/el/7/$basearch/
        gpgcheck: true
        enabled: true
        gpgkey: https://packages.chef.io/chef.asc

packages:
  - git
  - chef
  - vim
  - yum-utils 
  - device-mapper-persistent-data 
  - lvm2 
  - parted

users:
  - name: user
    primary_group: user
    groups: [adm,wheel,systemd-journal]
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6tTtdfddfstVie4t/vkg5UkzRH9SVAjejS7BGceYrzjI4Stk5/qp/S5E6cNEo7LW240dS128ya7lcAVbvxX/dY9AygVB6r82M+qUAL+COdVqgypzY9TmxsfdsBiL8+e5+56wN1V3h6xdfdfa584AjZ5eGANmdfs4rmHp4uproObydfsf6Xk5QxkM+5xPoOFGP+xBHj9EWciMiGxspfiPOqT7Cof5ldfsdbdf4n0XMICSWgGRmfQoM4n/yeWrIu5cPx0MLfdfsn7BfTM+CfM6gtMJcu5J46J8eKZiH2ZxIMOlht8xUfphC+WFQHf1aGWQoZEA8sXdfsZ43V4CSjSRRZFSJIHqTcArwY38guTFBi28tJhyDv1  user@localhost
write_files:
- path: /etc/telegraf/telegraf.conf
  content: |
    [global_tags]
      # dc = "us-east-1" # will tag all metrics with dc=us-east-1
      # rack = "1a"
      #host = "$HOSTNAME"
      ## Environment variables can be used as tags, and throughout the config file
      # user = "$USER"
    [agent]
      ## Default data collection interval for all inputs
      interval = "10s"
      ## Rounds collection interval to 'interval'
      ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
      round_interval = true
      ## Telegraf will send metrics to outputs in batches of at most
      ## metric_batch_size metrics.
      ## This controls the size of writes that Telegraf sends to output plugins.
      metric_batch_size = 1000
      ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
      ## output, and will flush this buffer on a successful write. Oldest metrics
      ## are dropped first when this buffer fills.
      ## This buffer only fills when writes fail to output plugin(s).
      metric_buffer_limit = 10000
      ## Collection jitter is used to jitter the collection by a random amount.
      ## Each plugin will sleep for a random time within jitter before collecting.
      ## This can be used to avoid many plugins querying things like sysfs at the
      ## same time, which can have a measurable effect on the system.
      collection_jitter = "0s"
      ## Default flushing interval for all outputs. You shouldn't set this below
      ## interval. Maximum flush_interval will be flush_interval + flush_jitter
      flush_interval = "10s"
      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "0s"
      ## By default or when set to "0s", precision will be set to the same
      ## timestamp order as the collection interval, with the maximum being 1s.
      ##   ie, when interval = "10s", precision will be "1s"
      ##       when interval = "250ms", precision will be "1ms"
      ## Precision will NOT be used for service inputs. It is up to each individual
      ## service input to set the timestamp at the appropriate precision.
      ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
      precision = ""
      ## Logging configuration:
      ## Run telegraf with debug log messages.
      debug = false
      ## Run telegraf in quiet mode (error log messages only).
      quiet = false
      ## Specify the log file name. The empty string means to log to stderr.
      logfile = ""
      ## Override default hostname, if empty use os.Hostname()
      hostname = ""
      ## If set to true, do no set the "host" tag in the telegraf agent.
      omit_hostname = false
      ## The full HTTP or UDP URL for your InfluxDB instance.
      ##
      ## Multiple urls can be specified as part of the same cluster,
      ## this means that only ONE of the urls will be written to each interval.
      # urls = ["udp://localhost:8089"] # UDP endpoint example
    # urls = ["http://localhost:8086"] # required
      ## The target database for metrics (telegraf will create it if not exists).
      #database = "telegraf" # required
      ## Name of existing retention policy to write to.  Empty string writes to
      ## the default retention policy.
      #retention_policy = ""
      ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
      #write_consistency = "any"
      ## Write timeout (for the InfluxDB client), formatted as a string.
      ## If not provided, will default to 5s. 0s means no timeout (not recommended).
      #timeout = "5s"
      # username = "telegraf"
      # password = "metricsmetricsmetricsmetrics"
      ## Set the user agent for HTTP POSTs (can be useful for log differentiation)
      # user_agent = "telegraf"
      ## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
      # udp_payload = 512
      ## Optional SSL Config
      # ssl_ca = "/etc/telegraf/ca.pem"
      # ssl_cert = "/etc/telegraf/cert.pem"
      # ssl_key = "/etc/telegraf/key.pem"
      ## Use SSL but skip chain & host verification
      # insecure_skip_verify = false
      ## HTTP Proxy Config
      # http_proxy = "http://corporate.proxy:3128"
      ## Optional HTTP headers
      # http_headers = {"X-Special-Header" = "Special-Value"}
      ## Compress each HTTP request payload using GZIP.
      # content_encoding = "gzip"
    [[outputs.prometheus_client]]
    listen = ":9273"
    path = "/metrics"   
    expiration_interval = "60s"

    [[inputs.cpu]]
      ## Whether to report per-cpu stats or not
      percpu = true
      ## Whether to report total system cpu stats or not
      totalcpu = true
      ## If true, collect raw CPU time metrics.
      collect_cpu_time = false
      ## If true, compute and report the sum of all non-idle CPU states.
      report_active = false
    [[inputs.disk]]
      ## By default, telegraf gather stats for all mountpoints.
      ## Setting mountpoints will restrict the stats to the specified mountpoints.
      # mount_points = ["/"]
      ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
      ## present on /run, /var/run, /dev/shm or /dev).
      ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
    [[inputs.diskio]]
      ## By default, telegraf will gather stats for all devices including
      ## disk partitions.
      ## Setting devices will restrict the stats to the specified devices.
      # devices = ["sda", "sdb"]
      ## Uncomment the following line if you need disk serial numbers.
      # skip_serial_number = false
      #
      ## On systems which support it, device metadata can be added in the form of
      ## tags.
      ## Currently only Linux is supported via udev properties. You can view
      ## available properties for a device by running:
      ## 'udevadm info -q property -n /dev/sda'
      # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
      #
      ## Using the same metadata source as device_tags, you can also customize the
      ## name of the device via templates.
      ## The 'name_templates' parameter is a list of templates to try and apply to
      ## the device. The template may contain variables in the form of '$PROPERTY' or
      ## '$PROPERTY'. The first template which does not contain any variables not
      ## present for the device is used as the device name tag.
      ## The typical use case is for LVM volumes, to get the VG/LV name instead of
      ## the near-meaningless DM-0 name.
      # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]
    [[inputs.kernel]]
      # no configuration
    [[inputs.mem]]
      # no configuration
    [[inputs.processes]]
      # no configuration
    [[inputs.swap]]
      # no configuration
    [[inputs.system]]
      # no configuration
    [[inputs.nstat]]
