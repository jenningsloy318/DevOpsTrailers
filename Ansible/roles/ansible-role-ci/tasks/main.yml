- name: Download jdk
  get_url:
    url: "{{JDK_URL}}"
    dest: /tmp/jdk-linux-x64.rpm
    headers: "{{JDK_HEADER}}"
    validate_certs: false

- name: install jdk 
  package:
    name: /tmp/jdk-linux-x64.rpm
    state: present
  when: ansible_os_family == "RedHat" or ansible_os_family == "Suse"
  
- name: Download jenkins repo
  get_url:
    url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
    dest: /etc/yum.repos.d/jenkins.repo 

- name: import jenkins repo key
  rpm_key:
    state: present
    key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  when: ansible_os_family == "RedHat"


- name: install additional package
  package: 
    name: "{{ item}}"
    state: latest
    update_cache: yes
  with_items:
    - libaio
    - git
    - jenkins
    - rsync

- name: add JAVA_HOME 
  lineinfile: 
   dest: /etc/profile
   state: present
   regexp: '^export.*JAVA_HOME=.*'
   line:  "export JAVA_HOME={{java_home}}"




- name: Extract com.sap.prd.commonrepo.artifactdeployer.dist.cli-0.19.2.tar.gz into /data
  unarchive:
    src: com.sap.prd.commonrepo.artifactdeployer.dist.cli-0.19.2.tar.gz
    dest: /data



- name: Extract com.sap.prd.commonrepo.artifactimporter.dist.cli-0.11.5.tar.gz into /data
  unarchive:
    src: com.sap.prd.commonrepo.artifactimporter.dist.cli-0.11.5.tar.gz
    dest: /data/



- name: create  artifactimporter/artifactdeployer/nexus directory
  file:
    path: '{{ item }}'
    state: directory
  with_items:
    - /data/artifactimporter
    - /data/artifactdeployer
    - /data/nexus
    - /etc/docker


- name: copy artifactimporter files
  shell: rsync -a   /data/artifactimporter-0.11.5/ /data/artifactimporter/


- name: rename artifactdeployer
  shell: rsync -a /data/artifactdeployer-0.19.2/ /data/artifactdeployer/


- name: set ARTIFACTDEPLOYER_HOME
  lineinfile: 
   dest: /etc/profile
   state: present
   regexp: '^export.*ARTIFACTDEPLOYER_HOME=.*'
   line:  "export ARTIFACTDEPLOYER_HOME=/data/artifactdeployer" 

- name: set ARTIFACTIMPORTER_HOME
  lineinfile: 
   dest: /etc/profile
   state: present
   regexp: '^export.*ARTIFACTIMPORTER_HOME=.*'
   line:  "export ARTIFACTIMPORTER_HOME=/data/artifactimporter"    

- name: copy SAPCAR
  copy:
    src: SAPCAR
    dest: /usr/bin/SAPCAR
    mode: 0755
    owner: root
    group: root

- name: copy SAP_HANA_CLIENT100_122_10_Linux_on_x86_64.SAR
  copy:
    src: SAP_HANA_CLIENT100_122_10_Linux_on_x86_64.SAR
    dest: /data/SAP_HANA_CLIENT100_122_10_Linux_on_x86_64.SAR 

- name: extract SAP_HANA_CLIENT100_122_10_Linux_on_x86_64.SAR
  shell: SAPCAR -xf SAP_HANA_CLIENT100_122_10_Linux_on_x86_64.SAR
  args:
    chdir: /data/

- name: install hana client
  shell: /data/SAP_HANA_CLIENT/hdbinst --batch -a client

- name: set HDBCLIENT_HOME
  lineinfile: 
   dest: /etc/profile
   state: present
   regexp: '^export.*HDBCLIENT_HOME=.*'
   line:  "export export HDBCLIENT_HOME=/usr/sap/hdbclient"    



- name: download nexus
  get_url:
    url: https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-3.10.0-04-unix.tar.gz
    dest: /tmp/nexus-3.10.0-04-unix.tar.gz

- name: Extract nexus
  unarchive:
    src:  /tmp/nexus-3.10.0-04-unix.tar.gz
    dest: /data/nexus
    remote_src: yes

- name: create nexus user
  user:
    name: nexus
    shell: /bin/sh
    home: /data/nexus


#- name: copy nexus 
#  shell: rsync -a /data/nexus-3.10.0-04/ /data/nexus/


- name: set owner of /data/nexus
  file:
    path: /data/nexus/
    owner: nexus
    group: nexus
    recurse: yes


   
   

- name: remove useless files
  file:  
    path: '{{ item }}'
    state: absent
  with_items:
    - /tmp/nexus-3.10.0-04-unix.tar.gz
    - /tmp/jdk-linux-x64.rpm
    - /data/SAP_HANA_CLIENT100_122_10_Linux_on_x86_64.SAR
    - /data/artifactimporter-0.11.5/
    - /data/artifactdeployer-0.19.2/ 

- name: set NEXUS_HOME
  lineinfile: 
   dest: /etc/profile
   state: present
   regexp: '^export.*NEXUS_HOME=.*'
   line:  "export NEXUS_HOME=/data/nexus"    

- name: install nexus service file
  copy:
    src: nexus.service
    dest: /lib/systemd/system/nexus.service

- name: modify PATH 
  lineinfile: 
    dest: /etc/profile
    state: present
    regexp: '^export.*PATH=.*'
    line:  "export PATH=$PATH:$ARTIFACTDEPLOYER_HOME/bin:$ARTIFACTIMPORTER_HOME/bin:$HDBCLIENT_HOME:$NEXUS_HOME/bin:$JAVA_HOME/bin" 

- name: start nexus
  systemd:
    name: nexus
    state: restarted
    daemon_reload: yes
    enabled: yes

- name: ensure /tmp is global writable
  file: 
    path: /tmp
    state: directory
    mode: 0777

#- name: remove legacy init file
#  file:
#    path: /etc/init.d/jenkins
#    state: absent


- name: start jenkins
  systemd:
    name: jenkins
    state: restarted
    daemon_reload: yes
    enabled: yes
#- name: show jenkins initial admin password 
#  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
#  register: jenkinsadminpass

#- debug: var=jenkinsadminpass.stdout_lines

- name: install docker engine repo 
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo
- name: ensure docker engine is installed
  package:
    name: "{{item}}"
    state: installed
  with_items:
  - docker-ce
  when: ansible_os_family == "RedHat" or    ansible_os_family == "Suse"


- name: edit docker.service
  lineinfile:
    path: /lib/systemd/system/docker.service
    regexp: '^ExecStart='
    line: 'ExecStart=/usr/bin/dockerd'

- name: install /etc/docker/daemon.json
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
- name: restart docker service
  systemd:
    name: docker
    state: restarted
    enabled: yes
    daemon_reload: yes


- name: add firewalld rules
  firewalld:
    zone: public
    port: 2375/tcp
    permanent: true
    state: enabled
  when: ansible_os_family == "RedHat"

- name: add firewalld rules
  firewalld:
    zone: public
    port: 6443/tcp
    permanent: true
    state: enabled
  when: ansible_os_family == "RedHat"

- name: add firewalld rules
  firewalld:
    zone: public
    port: 8443/tcp
    permanent: true
    state: enabled
  when: ansible_os_family == "RedHat"

- name: reload firewalld
  shell: firewall-cmd --reload
  when: ansible_os_family == "RedHat"
