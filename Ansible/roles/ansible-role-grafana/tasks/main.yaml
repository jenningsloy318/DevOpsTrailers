- name: check if rpm is download 
  stat:
    path: "/tmp/grafana-{{grafana_version}}.x86_64.rpm"
- name: download the package
  get_url:
    url: "{{grafana_rpm_url}}"
    dest: "/tmp/grafana-{{grafana_version}}.x86_64.rpm"
    mode: 0440

- name: install grafana
  package: 
    name: "/tmp/grafana-{{grafana_version}}.x86_64.rpm"
    state: installed
- name: install grafana conf
  template:
    src: grafana.ini.j2
    dest: /etc/grafana/grafana.ini

- name: create required directories 
  file: 
    path: "{{item}}"
    state: directory
    owner: grafana
    group: grafana
  with_items:
  - "{{ grafana_dashpoard_path }}"
  - "{{ grafana_data_path }}"
  - "{{ grafana_log_path }}"
  - "{{ grafana_plugins_path }}"
  - "{{ grafana_dashpoard_provisioning_path }}"
  - "{{ grafana_dashpoard_provisioning_path }}/datasources"
  - "{{ grafana_dashpoard_provisioning_path }}/dashboards"

- name: create datasources provisioning file
  template:
    src: datasources.yaml.j2
    dest: "{{ grafana_dashpoard_provisioning_path }}/datasources"
    owner: grafana
    group: grafana

- name: create dashboards provisioning file
  template:
    src: dashboards.yaml.j2
    dest: "{{ grafana_dashpoard_provisioning_path }}/dashboards"
    owner: grafana
    group: grafana

- name: modify grafana-server service file (1)
  lineinfile:
    path: /etc/sysconfig/grafana-server
    regexp: '^LOG_DIR='
    line: 'LOG_DIR={{grafana_log_path }}'
    state: present

- name: modify grafana-server service file (2)
  lineinfile:
    path: /etc/sysconfig/grafana-server
    regexp: '^DATA_DIR='
    line: 'DATA_DIR={{grafana_data_path}}'
    state: present    

- name: modify grafana-server service file (3)
  lineinfile:
    path: /etc/sysconfig/grafana-server
    regexp: '^PLUGINS_DIR='
    line: 'PLUGINS_DIR={{grafana_plugins_path }}'
    state: present    
- name: update dashboard provisioning setting
  copy:
    src: "{{item}}"
    dest: "{{grafana_dashpoard_provisioning_path}}/dashboards"
  with_items:
  - 

- name: start grafana  
  systemd: 
    name: grafana-server
    state: restarted
    enabled: yes
    daemon_reload: yes
- name: add firewalld rules
  firewalld:
    zone: public
    port: "{{grafana_http_port}}/tcp"
    permanent: true
    state: enabled
  when: ansible_os_family == "RedHat"
- name: reload firewalld 
  shell: firewall-cmd --reload
  when: ansible_os_family == "RedHat"