- name: check if rpm is download 
  stat:
    path: "/tmp/grafana-{{grafana_version}}.x86_64.rpm"
- name: download the package
  get_url:
    url: "{{grafana_rpm_url}}"
    dest: "/tmp/grafana-{{grafana_version}}.x86_64.rpm"
    mode: 0440

- name: install grafana
  package: 
    name: "/tmp/grafana-{{grafana_version}}.x86_64.rpm"
    state: installed

- name: install grafana conf
  template:
    src: grafana.ini.j2
    dest: /etc/grafana/grafana.ini

- name: create required directories 
  file: 
    path: "{{item}}"
    state: directory
    owner: grafana
    group: grafana
  with_items:
  - "{{ grafana_dashpoard_path }}"
  - "{{ grafana_data_path }}"
  - "{{ grafana_log_path }}"
  - "{{ grafana_plugins_path }}"
  - "{{ grafana_provisioning_path }}"
  - "{{ grafana_provisioning_path }}/datasources"
  - "{{ grafana_provisioning_path }}/dashboards"

- name: create datasources provisioning file
  template:
    src: "{{item}}"
    dest: "{{ grafana_dashpoard_provisioning_path }}/datasources"
    owner: grafana
    group: grafana
  with_fileglob:
   - "files/*-datasource.yaml.j2"

- name: create dashboards provisioning file
  template:
    src: dashboards.yaml.j2
    dest: "{{ grafana_dashpoard_provisioning_path }}/dashboards"
    owner: grafana
    group: grafana
  with_fileglob:
  - "files/*dashboards.yaml.j2"
  
- name: ensure dashboards directories exist
  file:
    path: "{{item.options.path}}"
    state: directory
    owner: grafana
    group: grafana
  with_items:
  - "{{ grafana_provisioning_dashboards }}"

- name: install the dashboards
  unarchive:
    src: "{{item.name}}-Dashboards.zip"
    dest: "{{ item.options.path)}}"
  with_items:
  - "{{grafana_provisioning_dashboards }}"

- name : install prometheus alertmanager datasource plugin
  unarchive:
    src: "{{ grafana_prometheus_alertmanager_datasource_url }}"
    dest: "{{ grafana_plugins_path }}"
    remote_src: yes
    owner: grafana
    group: grafana

- name: start grafana  
  systemd: 
    name: grafana-server
    state: restarted
    enabled: yes
    daemon_reload: yes
- name: add firewalld rules
  firewalld:
    zone: public
    port: "{{grafana_http_port}}/tcp"
    permanent: true
    state: enabled
  when: ansible_os_family == "RedHat"
- name: reload firewalld 
  shell: firewall-cmd --reload
  when: ansible_os_family == "RedHat"

- name: show service restart result 
  shell: journalctl -u grafana-server 
  args:
    warn: false 
  register: journalctl_grafana_server
- debug: var=journalctl_grafana_server.stdout_lines